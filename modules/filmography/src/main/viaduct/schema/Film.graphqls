"""
A single film.
"""
type Film implements Node @scope(to: ["default"]) @resolver {
  """
  The GlobalID of this film - uniquely identifies this Film in the graph (internal use only)
  """
  id: ID!

  """
  The title of this film.
  """
  title: String

  """
  The episode number of this film.
  """
  episodeID: Int

  """
  The opening paragraphs at the beginning of this film.
  """
  openingCrawl: String

  """
  The name of the director of this film.
  """
  director: String

  """
  The names of the producers of this film.
  """
  producers: [String]

  """
  The ISO 8601 date format of film release at original creator country.
  """
  releaseDate: String

  """
  The characters that appear in this film.
  """
  characters(limit: Int): [Character] @resolver

  """
  The planets that appear in this film.
  """
  planets(limit: Int): [Planet] @resolver

  """
  The species that appear in this film.
  """
  species(limit: Int): [Species] @resolver

  """
  The ISO 8601 date format of the time that this resource was created.
  """
  created: String

  """
  The ISO 8601 date format of the time that this resource was edited.
  """
  edited: String

  """
  Display title for the film (demonstrates computed field)
  """
  displayTitle: String @resolver

  """
  Summary with episode, title and director (demonstrates computed field)
  """
  summary: String @resolver

  """
  Production details including cast and crew (demonstrates computed field)
  """
  productionDetails: String @resolver

  """
  Character count summary (demonstrates relationship computation)
  """
  characterCountSummary: String @resolver
  """
  Main characters in this film (batch resolver example)
  """
  mainCharacters: [Character] @resolver
}

extend type Query @scope(to: ["default"]) {
  """
  All films
  """
  allFilms(limit: Int): [Film]
    @resolver
    @backingData(class: "viaduct.demoapp.films.viaduct.queryresolvers.AllFilmsResolver")
}
